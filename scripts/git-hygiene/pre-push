#!/bin/bash

# ========================================
# Git Hygiene - Pre-push Hook
# ========================================
# This hook prevents pushing files larger than 100MB.
# It runs before each push and blocks the push if
# any file in the commit tree exceeds the size limit.
#
# Features:
# - Checks all files in the commit tree for size violations
# - Provides helpful error messages and solutions
# - Uses the reusable check-file-size.sh script
# - Configurable size limit via environment variable
# - Works with multiple commits in a single push
# ========================================

set -e

# Configuration
MAX_FILE_SIZE_MB="${GIT_HYGIENE_MAX_SIZE:-100}"
HOOKS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
CHECK_SCRIPT="$PROJECT_ROOT/scripts/git-hygiene/check-file-size.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local icon=$2
    local message=$3
    echo -e "${color}${icon} ${message}${NC}"
}

print_status $BLUE "üöÄ" "Git Hygiene - Pre-push Hook"
echo "================================="

# Check if the check script exists
if [ ! -f "$CHECK_SCRIPT" ]; then
    print_status $YELLOW "‚ö†Ô∏è" "Warning: File size checker not found at $CHECK_SCRIPT"
    print_status $YELLOW "‚ÑπÔ∏è" "Run the setup script to install hooks properly"
    exit 0
fi

# Read stdin to get push information
# Format: <local ref> <local sha1> <remote ref> <remote sha1>
while read local_ref local_sha remote_ref remote_sha; do
    print_status $BLUE "üì°" "Push info: $local_ref -> $remote_ref"

    # Skip deletion pushes
    if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
        print_status $GREEN "‚úÖ" "Deletion push - skipping size check"
        continue
    fi

    # Get the commit range to check
    if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
        # New branch - check all files in the commit
        COMMIT_RANGE="$local_sha"
        print_status $BLUE "üåø" "New branch detected - checking all files in commit"
    else
        # Existing branch - check commits since remote
        COMMIT_RANGE="$remote_sha..$local_sha"
        print_status $BLUE "üìù" "Checking commits: $COMMIT_RANGE"
    fi

    # Get all files changed in the commit range
    CHANGED_FILES=$(git diff-tree -r --name-only "$COMMIT_RANGE" 2>/dev/null || echo "")

    if [ -z "$CHANGED_FILES" ]; then
        print_status $GREEN "‚úÖ" "No files to check in this push"
        continue
    fi

    print_status $BLUE "üîç" "Checking files in commit tree for size violations..."

    # Run the file size check
    if ! "$CHECK_SCRIPT" "$CHANGED_FILES" "$MAX_FILE_SIZE_MB"; then
        print_status $RED "‚ùå" "PUSH BLOCKED"
        echo ""
        echo "üí° To resolve this issue:"
        echo "  1. Remove large files from the last commit: git rm --cached <large-file>"
        echo "  2. Use Git LFS for large files: git lfs track <file>"
        echo "  3. Amend the commit: git commit --amend"
        echo "  4. Or increase the limit by setting GIT_HYGIENE_MAX_SIZE environment variable"
        echo ""
        echo "Example workflow:"
        echo "  git rm --cached path/to/large-file.mp4"
        echo "  git lfs track path/to/large-file.mp4"
        echo "  git add path/to/large-file.mp4"
        echo "  git commit --amend"
        echo ""
        print_status $YELLOW "‚ÑπÔ∏è" "Note: After using Git LFS, run 'git lfs install' if not already done"
        exit 1
    fi

    print_status $GREEN "‚úÖ" "All files in commit tree passed size check"

done

print_status $GREEN "üéâ" "All commits passed size validation"
exit 0
